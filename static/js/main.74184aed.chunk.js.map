{"version":3,"sources":["components/Autocomplete/Autocomplete.jsx","helpers/functionHelpers.js","components/TextFieldWidget/TextFieldWidgetDateRange/TextFieldWidgetDateRange.jsx","components/Graphic/Graphic.jsx","components/CircularProgressComponent/CircularProgressComponent.js","services/index.js","config/api.js","view/home.jsx","hooks/useLazyFetch.js","hooks/useFetch.js","App.jsx","serviceWorker.js","index.js","components/TextFieldWidget/TextFieldWidgetDateRange/TextFieldWidgetDateRange.module.scss","components/Graphic/Graphic.module.scss","components/CircularProgressComponent/CircularProgressComponent.module.scss"],"names":["ComboBox","props","control","errors","countries","useState","stateMessage","setStateMessage","stateError","setStateError","useEffect","type","errorMessage","message","ref","name","required","minLength","as","Autocomplete","id","options","getOptionLabel","option","renderOption","isoCode","alpha2Code","String","fromCodePoint","toUpperCase","replace","char","charCodeAt","renderInput","params","TextField","label","variant","error","helperText","onChange","rules","defaultValue","code","phone","dateFormatIso8601","date","Date","toISOString","substring","split","yy","mm","dd","dateFormatIso8601Chort","TextFieldWidgetDateRange","value","register","labeltext","format","labelFunc","emptyLabel","autoOk","onOpen","onClose","openForward","open","others","esLocaleDate","esLocale","begin","setBegin","end","setEnd","undefined","prevBegin","setPrevBegin","prevEnd","setPrevEnd","hasClicked","setHasClicked","hover","setHover","accepted","setAccepted","utils","useUtils","min","Math","max","setOpen","isOpen","formatDate","dateFormat","labelText","size","media","useMediaQuery","defaultMatches","IsDesktopHandler","className","classes","inputContainerStyle","DateFnsUtils","locale","DatePicker","inputVariant","fullWidth","margin","renderDay","day","selectedDate","dayInCurrentMonth","dayComponent","React","cloneElement","onClick","e","stopPropagation","isBeforeDay","onMouseEnter","requestAnimationFrame","onFocus","clsx","hidden","current","isDisabled","disabled","focusedRange","isAfterDay","isSameDay","focusedFirst","focusedLast","beginCap","endCap","onAccept","invalid","DialogProps","dateRangePickerDialog","Graphic","data","chart","height","title","text","xAxis","categories","map","yAxis","plotOptions","line","dataLabels","enabled","enableMouseTracking","series","Cases","containerGraphic","highcharts","Highcharts","CircularProgressComponent","CircularProgress","progress","country","fromDate","toDate","conexionApiCovid","axios","create","baseURL","process","headers","conexionApiCountries","Copyright","Typography","color","getFullYear","defaultValues","Alert","elevation","Home","validDate","setValidDate","clearRangeState","beginRangeState","setBeginRangeState","endRangeState","setEndRangeState","useForm","handleSubmit","openError","setOpenError","handleClose","event","reason","api","method","url","immediate","response","setResponse","setError","isLoading","setIsLoading","execute","useCallback","urlSend","a","then","res","finally","err","fetchData","useLazyFetch","responseCovid","errorCovid","isLoadingCovid","urlCountries","Services","useFetch","responseCountries","errorCountries","isLoadingCountries","getByCountry","Container","component","CssBaseline","Avatar","fontSize","onSubmit","currentDate","setData","period","placeholder","values","beginFormat","endFormat","onChangePeriod","Button","Snackbar","autoHideDuration","severity","length","Box","mt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.74184aed.chunk.js","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { Controller } from \"react-hook-form\";\nimport errorMessage from \"../../common/errorMessages.json\";\n\nexport default function ComboBox(props) {\n    const { control, errors, countries } = props;\n    const [stateMessage, setStateMessage] = useState(\"\");\n    const [stateError, setStateError] = useState(false);\n    useEffect(() => {\n        if (errors) {\n            switch (errors.type) {\n                case \"required\":\n                    setStateMessage(\n                        errorMessage.message[errors.ref.name].required\n                            ? errorMessage.message[errors.ref.name].required\n                            : errorMessage.message[errors.ref.name],\n                    );\n                    break;\n                case \"minLength\":\n                    setStateMessage(errorMessage.message[errors.ref.name].minLength);\n                    break;\n                default:\n                    break;\n            }\n            setStateError(true);\n        } else {\n            setStateMessage(\"\");\n            setStateError(false);\n        }\n    }, [errors]);\n\n    return (\n        <Controller\n            as={\n                <Autocomplete\n                    id=\"countryAutocomplete\"\n                    options={countries}\n                    getOptionLabel={(option) => option.name}\n                    renderOption={(option) => (\n                        <span>\n                            {countryToFlag(option.alpha2Code)} {option.name}\n                        </span>\n                    )}\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            label=\"Choose a country\"\n                            variant=\"outlined\"\n                            error={stateError}\n                            helperText={stateMessage}\n                        />\n                    )}\n                />\n            }\n            onChange={([, data]) => data}\n            name=\"country\"\n            rules={{ required: true }}\n            control={control}\n            defaultValue={{ code: \"AF\", label: \"Afghanistan\", phone: \"93\" }}\n        />\n    );\n}\n\nfunction countryToFlag(isoCode) {\n    return typeof String.fromCodePoint !== \"undefined\"\n        ? isoCode\n              .toUpperCase()\n              .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\n        : isoCode;\n}\n\n// const countries = [\n//     { code: \"AD\", label: \"Andorra\", phone: \"376\" },\n//     { code: \"AE\", label: \"United Arab Emirates\", phone: \"971\" },\n//     { code: \"AF\", label: \"Afghanistan\", phone: \"93\" },\n// ];\n","import { useMediaQuery } from \"@material-ui/core\";\nimport esLocale from \"date-fns/locale/es\";\nimport { format } from \"date-fns\";\n\nconst IsDesktopHandler = (size) => {\n    let media = null;\n\n    switch (size) {\n        case \"sm\":\n            media = \"(min-width: 576px)\";\n            break;\n        case \"md\":\n            media = \"(min-width: 768px)\";\n            break;\n        case \"lg\":\n            media = \"(min-width: 992px)\";\n            break;\n        case \"xl\":\n            media = \"(min-width: 1200px)\";\n            break;\n        default:\n            media = \"(min-width: 992px)\";\n    }\n\n    const matches = useMediaQuery(media, {\n        defaultMatches: true,\n    });\n\n    return matches;\n};\n\nconst dateFormatIso8601 = (date) => {\n    const dateFormat = new Date(date).toISOString();\n    const dateNewFormat = dateFormat.substring(0, 10);\n    const [yy, mm, dd] = dateNewFormat.split(/-/g);\n    return `${yy}-${mm}-${dd}`;\n};\n\nconst dateFormatIso8601Chort = (date) => {\n    const dateFormat = new Date(date).toISOString();\n    const dateNewFormat = dateFormat.substring(0, 10);\n    const [yy, mm, dd] = dateNewFormat.split(/-/g);\n    return `${dd}-${mm}`;\n};\n\nexport { IsDesktopHandler, dateFormatIso8601, dateFormatIso8601Chort };\n","import React, { useState, useEffect } from \"react\";\nimport esLocale from \"date-fns/locale/en-US\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, DatePicker, useUtils } from \"@material-ui/pickers\";\nimport clsx from \"clsx\";\nimport { IsDesktopHandler } from \"../../../helpers\";\nimport classes from \"./TextFieldWidgetDateRange.module.scss\";\nimport errorMessage from \"../../../common/errorMessages.json\";\nimport { Controller } from \"react-hook-form\";\n\nconst TextFieldWidgetDateRange = (props) => {\n    const {\n        control,\n        errors,\n        register,\n        labeltext,\n        value,\n        onChange,\n        labelFunc,\n        format,\n        emptyLabel,\n        autoOk,\n        onOpen,\n        onClose,\n        open: openForward,\n        ...others\n    } = props;\n    const esLocaleDate = esLocale;\n    const [begin, setBegin] = useState(value[0]);\n    const [end, setEnd] = useState(value[1]);\n    const [stateMessage, setStateMessage] = useState(\"\");\n    const [stateError, setStateError] = useState(false);\n    const [prevBegin, setPrevBegin] = useState(undefined);\n    const [prevEnd, setPrevEnd] = useState(undefined);\n    const [hasClicked, setHasClicked] = useState(false);\n\n    const [hover, setHover] = useState(undefined);\n    const [accepted, setAccepted] = useState(false);\n    const utils = useUtils();\n\n    const min = Math.min(begin, end || hover);\n    const max = Math.max(begin, end || hover);\n\n    const [open, setOpen] = useState(false);\n\n    const isOpen = openForward !== undefined ? openForward : open;\n\n    useEffect(() => {\n        if (errors) {\n            switch (errors.type) {\n                case \"required\":\n                    setStateMessage(\n                        errorMessage.message[errors.ref.name].required\n                            ? errorMessage.message[errors.ref.name].required\n                            : errorMessage.message[errors.ref.name],\n                    );\n                    break;\n                default:\n                    break;\n            }\n            setStateError(true);\n        } else {\n            setStateMessage(\"\");\n            setStateError(false);\n        }\n    }, [errors]);\n\n    useEffect(() => {\n        if (isOpen && accepted && !prevBegin && !prevEnd) {\n            setAccepted(false);\n            setPrevBegin(begin);\n            setPrevEnd(end);\n            return;\n        }\n        if (!isOpen && !accepted) {\n            setBegin(prevBegin);\n            setEnd(prevEnd);\n            setHover(undefined);\n            setHasClicked(false);\n        }\n        if (isOpen && autoOk && !accepted && begin && end && hasClicked) {\n            setAccepted(true);\n            onClose ? onClose() : setOpen(false);\n        }\n        if (accepted && begin && end && !isOpen && hasClicked) {\n            setHasClicked(false);\n            onChange({ begin, end });\n            onClose ? onClose() : setOpen(false);\n        }\n        if (emptyLabel) {\n            setEnd(undefined);\n            setBegin(undefined);\n        }\n    }, [\n        begin,\n        end,\n        autoOk,\n        accepted,\n        isOpen,\n        prevBegin,\n        hasClicked,\n        prevEnd,\n        onClose,\n        onChange,\n        emptyLabel,\n    ]);\n\n    function renderDay(day, selectedDate, dayInCurrentMonth, dayComponent) {\n        return React.cloneElement(dayComponent, {\n            onClick: (e) => {\n                setHasClicked(true);\n                e.stopPropagation();\n                if (!begin) setBegin(day);\n                else if (!end) {\n                    if (utils.isBeforeDay(day, begin)) {\n                        setEnd(begin);\n                        setBegin(day);\n                    } else {\n                        setEnd(day);\n                    }\n                    if (autoOk) {\n                        setPrevBegin(undefined);\n                        setPrevEnd(undefined);\n                    }\n                } else {\n                    setBegin(day);\n                    setEnd(undefined);\n                }\n            },\n            onMouseEnter: () => requestAnimationFrame(() => setHover(day)),\n            onFocus: () => requestAnimationFrame(() => setHover(day)),\n            className: clsx(classes.day, {\n                [classes.hidden]: dayComponent.props.hidden,\n                [classes.current]: dayComponent.props.current,\n                [classes.isDisabled]: dayComponent.props.disabled,\n                [classes.focusedRange]:\n                    (utils.isAfterDay(day, min) && utils.isBeforeDay(day, max)) ||\n                    (utils.isSameDay(day, min) && !utils.isSameDay(day, max)) ||\n                    (utils.isSameDay(day, max) && !utils.isSameDay(day, min)),\n                [classes.focusedFirst]: utils.isSameDay(day, min) && !utils.isSameDay(day, max),\n                [classes.focusedLast]: utils.isSameDay(day, max) && !utils.isSameDay(day, min),\n                [classes.beginCap]: utils.isSameDay(day, min),\n                [classes.endCap]: utils.isSameDay(day, max),\n            }),\n        });\n    }\n\n    const formatDate = (date) => utils.format(date, format || utils.dateFormat);\n\n    let labelText = null;\n    const isDesktop = IsDesktopHandler(\"sm\");\n    if (!isDesktop) {\n        labelText = null;\n    } else {\n        labelText = null;\n    }\n\n    return (\n        <div className={classes.inputContainerStyle}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils} locale={esLocaleDate}>\n                <Controller\n                    as={\n                        <DatePicker\n                            {...others}\n                            label={labelText}\n                            variant=\"outlined\"\n                            inputVariant=\"outlined\"\n                            fullWidth\n                            margin=\"dense\"\n                            value={begin}\n                            renderDay={renderDay}\n                            open={isOpen}\n                            error={stateError}\n                            helperText={stateMessage}\n                            onOpen={() => {\n                                setAccepted(false);\n                                setPrevBegin(begin);\n                                setPrevEnd(end);\n                                onOpen ? onOpen() : setOpen(true);\n                            }}\n                            onAccept={() => {\n                                if (!begin || !end) {\n                                    if (hover && utils.isBeforeDay(begin, hover)) {\n                                        setEnd(hover);\n                                    } else {\n                                        setEnd(begin);\n                                        setBegin(hover);\n                                    }\n                                }\n                                setPrevBegin(undefined);\n                                setPrevEnd(undefined);\n                                setAccepted(true);\n                            }}\n                            onClose={() => {\n                                onClose ? onClose() : setOpen(false);\n                            }}\n                            onChange={() => {}}\n                            labelFunc={(date, invalid) => {\n                                if (!isOpen) {\n                                    if (date && begin && end && !emptyLabel) {\n                                        return `${formatDate(begin)} - ${formatDate(end)}`;\n                                    }\n                                    return \"\";\n                                }\n                            }}\n                            DialogProps={{ className: classes.dateRangePickerDialog }}\n                        />\n                    }\n                    name=\"period\"\n                    rules={{ required: true }}\n                    control={control}\n                />\n            </MuiPickersUtilsProvider>\n        </div>\n    );\n};\nexport default TextFieldWidgetDateRange;\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { dateFormatIso8601Chort } from \"../../helpers\";\nimport classes from \"./Graphic.module.scss\";\n\nconst Graphic = (props) => {\n    const { data } = props;\n    const arrayDate = data.map(({ Date }) => dateFormatIso8601Chort(Date));\n    const arrayCases = data.map(({ Cases }) => Cases);\n    const options = {\n        chart: {\n            height: \"20%\",\n            type: \"line\",\n        },\n        title: {\n            text: \"Gráfico\",\n        },\n        xAxis: {\n            categories: arrayDate,\n        },\n        yAxis: {\n            title: {\n                text: \"Total Case\",\n            },\n        },\n        plotOptions: {\n            line: {\n                dataLabels: {\n                    enabled: true,\n                },\n                enableMouseTracking: false,\n            },\n        },\n        series: [\n            {\n                name: \"\",\n                data: arrayCases,\n            },\n        ],\n    };\n    return (\n        <div className={classes.containerGraphic}>\n            <HighchartsReact highcharts={Highcharts} options={options} />\n        </div>\n    );\n};\n\nexport default Graphic;\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport classes from './CircularProgressComponent.module.scss';\n\nconst CircularProgressComponent = () => {\n    return (\n        <CircularProgress size={24} className={classes.progress} />\n    );\n};\n\nexport default CircularProgressComponent;","const getByCountry = (country, fromDate, toDate) => {\n    return `${country}/status/confirmed?from=${fromDate}&to=${toDate}`;\n};\n\nconst getCountries = () => {\n    return \"all\";\n};\n\nexport default {\n    getByCountry,\n    getCountries,\n};\n","import axios from \"axios\";\n\nexport const conexionApiCovid = axios.create({\n    baseURL: process.env.REACT_APP_URL_COVID19,\n    headers: {\n        \"Content-type\": \"application/json\",\n    },\n});\n\nexport const conexionApiCountries = axios.create({\n    baseURL: process.env.REACT_APP_URL_COUNTRIES,\n    headers: {\n        \"Content-type\": \"application/json\",\n    },\n});\n","import React, { useState, useEffect } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { useForm } from \"react-hook-form\";\nimport Box from \"@material-ui/core/Box\";\nimport LocalHospitalIcon from \"@material-ui/icons/LocalHospital\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n    Autocomplete,\n    TextFieldWidgetDateRange,\n    Graphic,\n    CircularProgressComponent,\n} from \"../components\";\nimport Services from \"../services\";\nimport { useLazyFetch, useFetch } from \"../hooks\";\nimport { conexionApiCovid, conexionApiCountries } from \"../config/api\";\nimport { dateFormatIso8601 } from \"../helpers\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\">\n            {\"Copyright © \"}\n            WE\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\nconst defaultValues = {\n    country: null,\n};\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function Home() {\n    const [validDate, setValidDate] = useState(false);\n    const [clearRangeState] = useState(false);\n    const [beginRangeState, setBeginRangeState] = useState({\n        date: \"\",\n        dateFormat: \"\",\n    });\n    const [endRangeState, setEndRangeState] = useState({\n        date: \"\",\n        dateFormat: \"\",\n    });\n    const { handleSubmit, control, errors } = useForm({\n        defaultValues,\n    });\n    const [openError, setOpenError] = useState(false);\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setOpenError(false);\n    };\n\n    const {\n        execute,\n        response: responseCovid,\n        error: errorCovid,\n        isLoading: isLoadingCovid,\n    } = useLazyFetch({\n        api: conexionApiCovid,\n        method: \"get\",\n        url: \"\",\n    });\n\n    const urlCountries = Services.getCountries();\n\n    const {\n        response: responseCountries,\n        error: errorCountries,\n        isLoading: isLoadingCountries,\n    } = useFetch({\n        api: conexionApiCountries,\n        method: \"get\",\n        url: urlCountries,\n    });\n\n    const onSubmit = ({ country }) => {\n        const currentDate = new Date();\n        if (endRangeState.date < currentDate) {\n            getByCountry(country.name, beginRangeState.dateFormat, endRangeState.dateFormat);\n            setValidDate(false);\n        } else {\n            setValidDate(true);\n            setData([]);\n        }\n    };\n\n    const onChangePeriod = ({ begin, end }) => {\n        const beginFormat = dateFormatIso8601(begin);\n        const endFormat = dateFormatIso8601(end);\n        setBeginRangeState({\n            date: begin,\n            dateFormat: beginFormat,\n        });\n        setEndRangeState({\n            date: end,\n            dateFormat: endFormat,\n        });\n    };\n    const getByCountry = (country, fromDate, toDate) => {\n        const url = Services.getByCountry(country, fromDate, toDate);\n        execute(url);\n    };\n\n    useEffect(() => {\n        if (errorCovid || errorCountries) {\n            setOpenError(true);\n        }\n    }, [errorCovid, errorCountries]);\n\n    return (\n        <Container component=\"main\" className=\"container\">\n            <CssBaseline />\n            <div>\n                <div className=\"avatar\">\n                    <Avatar className=\"color-circle\">\n                        <LocalHospitalIcon fontSize=\"large\" className=\"color\" />\n                    </Avatar>\n                </div>\n                <div className=\"tipography\">\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Covid-19\n                    </Typography>\n                </div>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"form-item\">\n                        {isLoadingCountries === false ? (\n                            <Autocomplete\n                                countries={responseCountries}\n                                control={control}\n                                errors={errors.country}\n                            />\n                        ) : (\n                            isLoadingCountries && <CircularProgressComponent />\n                        )}\n                    </div>\n                    <div className=\"form-item\">\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                            <TextFieldWidgetDateRange\n                                value={[]}\n                                name=\"period\"\n                                emptyLabel={clearRangeState}\n                                labeltext=\"Período Inasistencia\"\n                                errors={errors.period}\n                                control={control}\n                                placeholder=\"Select date\"\n                                format=\"dd/MM/yyyy\"\n                                onChange={(values) => onChangePeriod(values)}\n                            />\n                        </MuiPickersUtilsProvider>\n                    </div>\n                    <div className=\"form-item\">\n                        <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n                            Search\n                        </Button>\n                    </div>\n                    <div className=\"form-item\">\n                        <Snackbar open={openError} autoHideDuration={6000} onClose={handleClose}>\n                            <Alert onClose={handleClose} severity=\"error\">\n                                ERROR API!\n                            </Alert>\n                        </Snackbar>\n                    </div>\n                </form>\n\n                {responseCovid && responseCovid.length !== 0 ? (\n                    <Graphic data={responseCovid} />\n                ) : (\n                    isLoadingCovid && (\n                        <div className=\"form-item\">\n                            <CircularProgressComponent />\n                        </div>\n                    )\n                )}\n                {validDate && <p>Invalid Date - Max date is today</p>}\n            </div>\n            <Box mt={1}>\n                <Copyright />\n            </Box>\n        </Container>\n    );\n}\n","import { useState, useEffect, useCallback } from \"react\";\n\nfunction useLazyFetch({ api, method, url, immediate = false }) {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(null);\n\n    const execute = useCallback(\n        (urlSend) => {\n            setIsLoading(true);\n\n            const fetchData = async () => {\n                try {\n                    api[method](urlSend)\n                        .then((res) => {\n                            setResponse(res.data);\n                        })\n                        .finally(() => {\n                            setIsLoading(false);\n                        });\n                } catch (err) {\n                    setError(err);\n                    setIsLoading(false);\n                }\n            };\n\n            return fetchData();\n        },\n        [url],\n    );\n\n    useEffect(() => {\n        if (immediate) {\n            execute();\n        }\n    }, [execute, immediate]);\n\n    return { execute, response, error, isLoading };\n}\nexport { useLazyFetch };\n","import { useState, useEffect, useCallback } from \"react\";\n\nfunction useFetch({ api, method, url, immediate = true }) {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(null);\n\n    const execute = useCallback(() => {\n        setIsLoading(true);\n\n        const fetchData = async () => {\n            try {\n                api[method](url)\n                    .then((res) => {\n                        setResponse(res.data);\n                    })\n                    .finally(() => {\n                        setIsLoading(false);\n                    });\n            } catch (err) {\n                setError(err);\n                setIsLoading(false);\n            }\n        };\n\n        return fetchData();\n    }, [url]);\n\n    useEffect(() => {\n        if (immediate) {\n            execute();\n        }\n    }, [execute, immediate]);\n\n    return { response, error, isLoading };\n}\nexport { useFetch };\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./view/home\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Home />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainerStyle\":\"TextFieldWidgetDateRange_inputContainerStyle__1HNYv\",\"labelDesktopStyle\":\"TextFieldWidgetDateRange_labelDesktopStyle__3FNTL\",\"dateRangePickerDialog\":\"TextFieldWidgetDateRange_dateRangePickerDialog__2ggw7\",\"MuiPickersCalendar-transitionContainer\":\"TextFieldWidgetDateRange_MuiPickersCalendar-transitionContainer__2tzPk\",\"day\":\"TextFieldWidgetDateRange_day__3OYOt\",\"hidden\":\"TextFieldWidgetDateRange_hidden__wLWZN\",\"current\":\"TextFieldWidgetDateRange_current__2c2Mi\",\"focusedRange\":\"TextFieldWidgetDateRange_focusedRange__18jqO\",\"dayDisabled\":\"TextFieldWidgetDateRange_dayDisabled__1AAyl\",\"beginCap\":\"TextFieldWidgetDateRange_beginCap__2e-KS\",\"endCap\":\"TextFieldWidgetDateRange_endCap__3a725\",\"focusedFirst\":\"TextFieldWidgetDateRange_focusedFirst__2pj6I\",\"focusedLast\":\"TextFieldWidgetDateRange_focusedLast__2LPqS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerGraphic\":\"Graphic_containerGraphic__3oJMR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"CircularProgressComponent_progress__2eJfb\"};"],"sourceRoot":""}